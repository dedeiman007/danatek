{"remainingRequest":"D:\\Project\\pt-dantek\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\pt-dantek\\src\\views\\News.vue?vue&type=template&id=1aa8c6e6&","dependencies":[{"path":"D:\\Project\\pt-dantek\\src\\views\\News.vue","mtime":1668766540843},{"path":"D:\\Project\\pt-dantek\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668488627837},{"path":"D:\\Project\\pt-dantek\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668488627837},{"path":"D:\\Project\\pt-dantek\\node_modules\\babel-loader\\lib\\index.js","mtime":1668488627092},{"path":"D:\\Project\\pt-dantek\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1668488636764},{"path":"D:\\Project\\pt-dantek\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668488627837},{"path":"D:\\Project\\pt-dantek\\node_modules\\vue-loader\\lib\\index.js","mtime":1668488636763}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}