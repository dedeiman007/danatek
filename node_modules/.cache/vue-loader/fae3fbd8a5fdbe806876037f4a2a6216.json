{"remainingRequest":"D:\\Project\\pt-dantek\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\pt-dantek\\src\\views\\About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"D:\\Project\\pt-dantek\\src\\views\\About.vue","mtime":1668943126586},{"path":"D:\\Project\\pt-dantek\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668488627837},{"path":"D:\\Project\\pt-dantek\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668488627837},{"path":"D:\\Project\\pt-dantek\\node_modules\\babel-loader\\lib\\index.js","mtime":1668488627092},{"path":"D:\\Project\\pt-dantek\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1668488636764},{"path":"D:\\Project\\pt-dantek\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668488627837},{"path":"D:\\Project\\pt-dantek\\node_modules\\vue-loader\\lib\\index.js","mtime":1668488636763}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}